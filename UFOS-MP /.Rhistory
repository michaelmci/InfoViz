help
?help
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
runApp("my app")
> library(shiny)
> runApp("my app")
my("my app")
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
ui <-
server
ui <- fluidPage(
l
l
l
l
library(shiny)
runExample("01_hello")
library(shiny)
runApp("my_app")
library(shiny)
runApp("my_app")
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
runApp("my_app")
View(ui)
View(ui)
View(ui)
View(ui)
View(ui)
View(ui)
?help
installed.packages()
library(shiny)
runExample("01 hello")
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
View(ui)
library(shiny)
runApp("my app")
runApp("my_app")
library(shiny)
runExample("01_hello")
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
runApp("my_app")
library(shiny)
runApp("my_app")
}
library(shiny)
library(shiny)
runApp("my_app")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp('App-1')
runApp("App-1", display.mode = "showcase")
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp("App-1", display.mode = "showcase")
runApp('App-1')
runExample("02_text")
hist(sample4, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample2 <- rnorm(30)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
sample1 <- rnorm(10)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
hist(sample2, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
sample1 <- rnorm(10)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
xvalue <- seq(-3, 3, length = 100)
probability <-dnorm(xvalue)
sample1 <- rnorm(10)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample2 <- rnorm(30)
hist(sample2, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample3 <- rnorm(100)
hist(sample3, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample4 <- rnorm(1000)
hist(sample4, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
xvalue <- seq(-3, 3, length = 100)
sample1 <- rnorm(10)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
xvalue <- seq(-3, 3, length = 100)
probability <-dnorm(xvalue)
lines(xvalue, probability)
sample2 <- rnorm(30)
hist(sample2, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample1 <- rnorm(10)
hist(sample1, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
mean(data)
mean(data)
data <- c(137,151,151,156,153,139,152,131,141,142,121,155,150,146,141,160,134,158,163,159)
mean(data)
hist(data)
median(data)
sd(data)
mean(data)
hist(data)
probabilitiy <-dnorm(xvaluek mean = yourmena, sd=yoursd)
probabilitiy <-dnorm(xvaluek, mean = yourmena, sd=yoursd)
probabilitiy <-dnorm(xvalue, mean = yourmena, sd=yoursd)
probabilitiy <-dnorm(xvalue, mean = yourmena, sd=yoursd)
probabilitiy <-dnorm(data, mean = yourmena, sd=yoursd)
probabilitiy <-dnorm(data, mean = yourmean, sd=yoursd)
probabilitiy <-dnorm(data, mean = yourmean, sd=yoursd)
probabilitiy <-dnorm(mean = yourmean, sd=yoursd)
probabilitiy <-dnorm(mean = yourmean, sd=yoursd)
probabilitiy <-dnorm(x, mean = yourmean, sd=yoursd)
probabilitiy <-dnorm(data, mean = yourmean, sd=yoursd)
xvalue <- seq(120,160, lenght=100)
data <- c(137,151,151,156,153,139,152,131,141,142,121,155,150,146,141,160,134,158,163,159)
mean(data)
hist(data)
median(data)
sd(data)
xvalue <- seq(100,180, lenght=100)
probabilitiy <-dnorm(xvalue, mean = mean(data), sd=yoursd(data))
sampl1<-rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
probability <-dnorm(xvalue, mean = mean(data), sd=yoursd(data))
sampl1<-rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
sample1<-rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
xvalue <- seq(100,180, lenght=100)
sample1<-rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
data <- c(137,151,151,156,153,139,152,131,141,142,121,155,150,146,141,160,134,158,163,159)
mean(data)
var(data)
probability <-dnorm(data, mean = mean(data), sd=sd(data))
xvalue <- seq(100,180, lenght=100)
sample1<-rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
lines(xvalue, probability)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
data <- c(137,151,151,156,153,139,152,131,141,142,121,155,150,146,141,160,134,158,163,159)
mean(data)
median(data)
#Mode(sample4)
var(data)
sd(data) # sqrt(var(values))
Skew(data)
Kurt(data)
xvalue <- seq(100, 180, length = 100)
probability <-dnorm(xvalue, mean = 147, sd = 11.00239)
sample1 <- rnorm(10)
hist(data, freq = FALSE, main ="", xlab = "Parameter", ylab = "Frequency (relative)")
lines(xvalue, probability)
install.packages("MASS")
s4mean <- fitdistr(data, "normal")$estimate[1]
s4sd <- fitdistr(data, "normal")$estimate[2]
ks.test(data, "pnorm", mean = s4mean, sd = s4sd)
library(MASS) #fitdistr
s4mean <- fitdistr(data, "normal")$estimate[1]
s4sd <- fitdistr(data, "normal")$estimate[2]
ks.test(data, "pnorm", mean = s4mean, sd = s4sd)
ks.test(data, "pnorm", mean = s4mean, sd = s4sd)
s4mean <- fitdistr(data, "normal")$estimate[1]
s4sd <- fitdistr(data, "normal")$estimate[2]
ks.test(data, "pnorm", mean = s4mean, sd = s4sd)
shiny::runApp('ShinyTutorial/stockVis')
runApp("stockVis")
runApp("stockVis")
runApp('ShinyTutorial/stockVis')
runApp('ShinyTutorial/stockVis')
runApp('ShinyTutorial/stockVis')
runApp("stockVis")
runApp('ShinyTutorial/stockVis')
runApp('ShinyTutorial/stockVis')
runApp('ShinyTutorial/stockVis')
nsubjects <- 10
ya <- rnorm(nsubjects)
yb <- rnorm(nsubjects, mean = 0.2)
xa <- rep("A", nsubjects)
xbb <- rep("A", nsubjects)
y <- c(ya,yb)
x <- c(xa,xb)
df <- cbind (x,y)
nsubjects <- 10
ya <- rnorm(nsubjects)
yb <- rnorm(nsubjects, mean = 0.2)
xa <- rep("A", nsubjects)
xb <- rep("B", nsubjects)
y <- c(ya,yb)
x <- c(xa,xb)
df <- cbind (x,y)
df <- cbind (x,y)
View(df)
hist(ya)
t.test(y-x, alternative = "greater", data=df)
View(df)
t.test(y-x, alternative = "greater", data=df)
df <- data.frame(x, y)
t.test(y-x, alternative = "greater", data=df)
shapiro.test(sample)
t.test(y-x, alternative = "greater", data=df, var.equal = TRUE)
shapiro.test(sample)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
shiny::runApp('App-1')
runApp('App-1/app2.R')
runApp('App-1/app3.R')
runApp('census-app/app4.R')
runApp('census-app/app5.R')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/Practical Work - Visualization/bd2018_2019/big_data_shiny')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('Desktop/InfoViz/ufo-sightings')
runApp('ShinyTutorial/stockVis')
runApp('census-app/app5.R')
shiny::runApp('Desktop/Michael')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
